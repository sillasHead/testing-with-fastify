// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int     @id @default(autoincrement())
  name          String  @unique @db.VarChar(100)
  phone         String? @db.VarChar(20)
  address       String? @db.VarChar(150)
  addressNumber String? @map("address_number") @db.VarChar(10)
  complement    String? @db.VarChar(20)
  zip           String? @db.VarChar(10)
  recipient     String? @db.VarChar(100)
  order         Order[]

  @@map("customer")
}

model User {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(20)
  role          Role    @default(USER)
  email         String  @unique @db.VarChar(255)
  password      String  @db.VarChar(255)
  oauthProvider String? @map("oauth_provider") @db.VarChar(50)
  oauthId       String? @unique @map("oauth_id") @db.VarChar(255)
  order         Order[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(100)
  orderProduct OrderProduct[]

  @@map("product")
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELED

  @@map("order_status")
}

model Order {
  id              Int         @id @default(autoincrement())
  date            DateTime    @default(now()) @db.Date
  minTimeDelivery DateTime?   @map("min_time_delivery") @db.Time
  maxTimeDelivery DateTime?   @map("max_time_delivery") @db.Time
  orderStatus     OrderStatus @default(PENDING) @map("order_status")

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @map("customer_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  orderProduct OrderProduct[]

  @@map("order")
}

model OrderProduct {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @map("order_id")

  @@map("order_product")
}
